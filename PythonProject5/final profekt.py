import random
import time
import os

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∫–æ—Ä–¥—É
LEADERBOARD_FILE = "leaderboard.txt"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏
WIDTH = 3  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–º—É–≥
CAR = "üöó"
OBSTACLE = "X"
BONUS = "‚≠ê"
EMPTY = " "
LIVES = 3  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–∏—Ç—Ç—ñ–≤
START_SPEED = 0.5  # –ü–æ—á–∞—Ç–∫–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (—Å–µ–∫)
SPEED_INCREASE = 0.05  # –ó–º–µ–Ω—à–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏ –∫–æ–∂–Ω—ñ 10 –æ—á–æ–∫

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Ä–µ–∫–æ—Ä–¥—É
def load_high_score():
    if os.path.exists(LEADERBOARD_FILE):
        with open(LEADERBOARD_FILE, "r") as file:
            return int(file.read().strip())
    return 0

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∫–æ—Ä–¥—É
def save_high_score(score):
    with open(LEADERBOARD_FILE, "w") as file:
        file.write(str(score))

# –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–º—É–≥—É –¥–æ—Ä–æ–≥–∏
def generate_road():
    road = [EMPTY] * WIDTH
    rand_num = random.random()

    if rand_num < 0.4:  # 40% —à–∞–Ω—Å –ø–æ—è–≤–∏ –ø–µ—Ä–µ—à–∫–æ–¥–∏
        obstacle_pos = random.randint(0, WIDTH - 1)
        road[obstacle_pos] = OBSTACLE
    elif rand_num < 0.6:  # 20% —à–∞–Ω—Å –ø–æ—è–≤–∏ –±–æ–Ω—É—Å—É
        bonus_pos = random.randint(0, WIDTH - 1)
        road[bonus_pos] = BONUS

    return road

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∏
def display_game(road, car_position, score, high_score, lives):
    os.system("cls" if os.name == "nt" else "clear")  # –û—á–∏—â–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É
    print(f"üèÜ –†–µ–∫–æ—Ä–¥: {high_score} | –û—á–∫–∏: {score} | ‚ù§Ô∏è –ñ–∏—Ç—Ç—è: {lives}")

    for row in road:
        print("| " + " | ".join(row) + " |")

    car_row = [" "] * WIDTH
    car_row[car_position] = CAR
    print("| " + " | ".join(car_row) + " |")

# –û—Ü—ñ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—ñ—Å–ª—è –≥—Ä–∏
def get_rank(score):
    if score >= 50:
        return "üèéÔ∏è –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π –≥–æ–Ω—â–∏–∫!"
    elif score >= 30:
        return "üöó –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –≤–æ–¥—ñ–π!"
    elif score >= 10:
        return "üöô –ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å-–≥–æ–Ω—â–∏–∫!"
    else:
        return "üõë –ù–æ–≤–∞—á–æ–∫! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!"

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≥—Ä–∏
def main():
    car_position = 1  # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è
    score = 0
    lives = LIVES
    speed = START_SPEED
    game_over = False
    high_score = load_high_score()

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤—ñ —Ä—è–¥–∏
    road = [generate_road() for _ in range(5)]

    while not game_over:
        display_game(road, car_position, score, high_score, lives)

        # –í–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        move = input("–ö–µ—Ä—É–π –º–∞—à–∏–Ω–æ—é (A - –≤–ª—ñ–≤–æ, D - –≤–ø—Ä–∞–≤–æ, W - –≤–ø–µ—Ä–µ–¥): ").strip().upper()
        if move == "A" and car_position > 0:
            car_position -= 1
        elif move == "D" and car_position < WIDTH - 1:
            car_position += 1
        elif move != "W":
            continue  # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è, —è–∫—â–æ —Ü–µ –Ω–µ "W"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è
        if road[-1][car_position] == OBSTACLE:
            lives -= 1
            print("\nüí• –¢–∏ –≤—Ä—ñ–∑–∞–≤—Å—è! -1 –∂–∏—Ç—Ç—è!")
            if lives == 0:
                game_over = True
                break

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –±–æ–Ω—É—Å–∏
        if road[-1][car_position] == BONUS:
            score += 5
            print("\n‚≠ê –¢–∏ –∑—ñ–±—Ä–∞–≤ –±–æ–Ω—É—Å! +5 –æ—á–æ–∫!")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Ä–æ–≥–∏
        road.pop()  # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥
        road.insert(0, generate_road())  # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥
        score += 1

        # –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏ –∫–æ–∂–Ω—ñ 10 –æ—á–æ–∫
        if score % 10 == 0:
            speed = max(speed - SPEED_INCREASE, 0.1)

        time.sleep(speed)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∫–æ—Ä–¥—É
    print("\nüö® –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞! üö®")
    print(f"–¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {score}")
    print(f"–†–µ–π—Ç–∏–Ω–≥: {get_rank(score)}")

    if score > high_score:
        print("üéâ –ù–æ–≤–∏–π —Ä–µ–∫–æ—Ä–¥! üéâ")
        save_high_score(score)

# –ó–∞–ø—É—Å–∫ –≥—Ä–∏
if __name__ == "__main__":
    main()
